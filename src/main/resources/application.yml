spring:
  kafka:
    consumer:
      bootstrap-servers: 192.168.253.8:9092
      # Kafka 클러스터에 대한 초기 연결, global 설정이 있어도, consumer.bootstrap-servers가 존재하면 consuemer 전용으로 overring
      # Consumer는 Consumer Group이 존재하기 때문에, 유일하게 식별 가능한 Consumer Group을 작성
    # group-id를 application.yml에 지정하거나 Consumer Service의 @KafkaListener 에 지정하여 사용할 수도 있다.
    # group-id: testgroup
      # auto-offset-reset
      # Kafka 서버에 초기 offset이 없거나, 서버에 현재 offset이 더 이상 없는 경우 수행할 작업을 작성합니다.
      # Consumer Group의 Consumer는 메시지를 소비할 때 Topic내에 Partition에서 다음에 소비할 offset이 어디인지 공유를 하고 있습니다.
      # 그런데 오류 등으로 인해 이러한 offset 정보가 없어졌을 때 어떻게 offeset을 reset 할 것인지를 명시한다고 보시면 됩니다.
      # latest : 가장 최근에 생산된 메시지로 offeset reset
      # earliest : 가장 오래된 메시지로 offeset reset
      # none : offset 정보가 없으면 Exception 발생
      # 직접 Kafka Server에 접근하여 offset을 reset할 수 있지만, Spring에서 제공해주는 방식은 위와 같습니다.
      auto-offset-reset: earliest
      # Kafka에서 데이터를 받아올 때, key / value를 역직렬화 합니다
      # JSON 데이터를 넘겨줄 것이라면 JsonDeserializer도 가능
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      bootstrap-servers: 192.168.253.8:9092
      # Kafka에 데이터를 보낼 때, key / value를 직렬화
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer


# 여기서는 Producer/Consumer 설정을 application.yml에 작성했지만, bean을 통해 설정하는 방법도 있습니다.
# Producer, Consumer의 설정을 여러 개로 관리하고 싶다면 bean으로 구현하는 것도 좋은 방법일듯 합니다.